
SHOOL OF NET
https://portal.code.education

GIT HUDSON
https://github.com/hudsonsouza/workspace.git


ZEND FRAMEWORK 2: FUNDAMENTALS NEWS

:: Data 10-03-2016 ::

### 1. INTRODUCAO

1.1- VAMOS COMECAR

1.2 - INTRODUCAO

ZF é um framework open sorce, 
100% orientado a objetos
Trb com componentes, que possui poucas dependencias
ZF trb com modulos, e mantem a performace do sistema, em comparacao a outros frameworks que estao no mercado
ZF possui outros componentes: formulario, banco, etc
Principais funcionalidades: 
Essencia: ZF trb com a BSZ-Lines, que possubilita o usuario a criar e vender estas sistema como se fosse seu, sem ter problemas com direitos autorais
ZF requer PHP5.3.3
ZF trb com Composer
ZF trb com 2 arquitetura principais: Service Manager + Event Manager

ZF2 esta muito mais atualizado que o ZF1
ZF2 possui uma estrutura muito melhor, 

ZF2 Arquitetura: utiliza varios Design Patters, como padroes de projetos, e que trb com os mais novos padroes do mercados

Desacoplamento: os componentes nao sao tratados como componentes acoplados ao ZF2, vc pode utilizar  estes components fora do ZF2

Listener: a milhares de Listener que ficam "escutando" a aplicacao, e disparando Trigger para executar uma outra acao

Arquitetura MVC

Conceitos dos o ZF2:
1- Namespace: agrupador de Classes (pacotes)
	nao a colizoes de nomes, nem duplicidades de nomes
	utiliza-se Namespace em: CONSTANTE, FUNCOES E CLASSES

Criar sempre:
 1 arquivo
 1 classe
 1 namespaces

Caminho completo e apelido dentro do Namespace:
use Zend\Db\Adapter\Driver\Maysql\Mysql as MysqlDriver

ZEND\LOADER
Zf tem milhares de arquivos proprios
Autoloader vai chamando os arquivo conforme elas vaum sendo utilizadas
- AutoloaderFacctory: 
	Zend\Loader\AutoLoaderFactory
	criar e registar namespace automaticamente
	seria uma Fabrica de Autoloader, eles grava o caminho de  varios autoloaders, e dispara td de uma vez só
	
- ClassMapAutoloader:
	para colocar uma aplicacao de desenvolvimento
	ZF precisa saber quais sao os arquivos existentes dentro da aplicacao
	gera um indice, um mapa, de tds os arquivos existentes
	garante a melhor performace da apliacao

-  StandardAutoloader: 
	segue a PSR0 e a PSR4, é uma proposta de padronizacao do PHP
	define como deve ser o nome do arquivos e o nome do namespace
	Caminho Absoluto: Zend\Db\Adapter\Driver\Maysql\Mysql


1.3 GUIA DO ALUNO

donwloas:
1750-m2-guia-do-aluno.zip - 20.3 Mb


1.4 GUIA DE EXERCICIOS

download:
1751-m2-guia-de-exercicios.zip - 1.4 Mb



1.5 MAQUINA VIRTUAL

download:
1752-m2-maquina-virtual.zip - 516.4 Kb



### 2. DESIGN PATTERNS  E MVC


2.1 FALANDO DOBRE PATTERNS E MVC

DESIGN PATTERNS
Padrao de Projeto  - durante o processo de se trb com Orientacao a Objetos
Sao solucoes prontas q resolver problemas

- Factory Pattern: criar novos objetos

- Singleton Pattern: ZF2 nao utiliza, tem por objeto de criar uma unica instancia de um objeto, dentro de todo o projeto, possui diversar defeitos, dificeis de testar

- Observer (PubSub) Pattern: fica observando a mudança de estado dos objetos, e dispara uma memsagem para notificar outras classes

- Strategy Pattern: cria estrategia de como se resolver problemas comuns
	
- Model(dados)-View(mostra na tela)-Controller() (MVC): Estrutural / Arquitetural, separa as responsabilidades da aplicacao, em camadas diferentes
	Zend\Mvc\*
	- Zend\Mvc\Router - Router: caminho URL http://www.hudsonss.com.br/aula1.php
	- Zend\Mvc\Controller - Controller(Processamento Lógico: Request/Response) 
	- Zend\Mvc\Service - Model(banco de dados) chamada banco de dados
	- Zend\Mvc\View - View(mostra na tela) css, html. javascript
	
Event-Driven Architecture: conforme um MODULO é executado, ele dispara um EVENTO para exceutar outros MODULOS, nao é uma execução linear, ela vai disparando e executando conforme a necessicade	

Bootsrap: lista de configuracoes da aplicacao

Ordem do processamento dentro ZF2
1- Bootsrap
2- Router
3- Controller
4- Service
5- View


Composer: é uma biblioteca de terceiro, a parte do ZF2, um gerenciador de dependencias, ele instala as dependencias que estiverem faltando
download:
https://getcomposer.org/download - composer.phar

Atualizar a propria versao do seu Composer
php composer.phar self-update

Instalar pela primeira vez o Composer
php composer.phar install

Update ou add packages
php composer.phar update

Vendor
pasta vendor na raiz
arquivo AutoLoader do Composer


2.2 PROJETO FASE 1 (M2Ex1)

link do exercicio pronto
https://github.com/hudsonsouza/workspace.git


2.3 RESOLUCAO M2Ex1

download zf2
http://www.framework.zend.com/
get started
ZF2 Releases - versao2 *
ZF1 - Releases - versao1

BAIXAR
Esqueleto basico para uma aplicação
Get the Skaleton Aplication
http://www.framework.zend.com/downloads/skeleton-app

// CRIE UM DIRETORIO
cd my/project/dir

// CLONE ZEND DIRETO DO GIT
git clone git://github.com/zendframework/ZendSkeletonApplication.git onlinemarket.work

// ENTRE NO DIRETORIO
cd ZendSkeletonApplication

//INTALAR O COMPOSER - gerenciador de dependencias do PHP

php -r "readfile('https://getcomposer.org/installer');" > composer-setup.php
php -r "if (hash('SHA384', file_get_contents('composer-setup.php')) === '41e71d86b40f28e771d4bb662b997f79625196afcca95a5abf44391188c695c6c1456e16154c75a211d238cc3bc5cb47') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

// INSTALAR O ZF2 DENTRO DA NOSSA PASTA DE TRB
php composer.phar install


// TESTAR A APLICACAO SKELETON NO NAVEGADOR

NO TERMINAL, VAMOS SUBIR O SERVIDOR PHP
$ php -S localhost:8888 -t public/

NO NAVEGADOR - servidor php
localhost:8888

NO NAVEGADOR - lamp
localhost/workspace/onlinemarket.work/public
